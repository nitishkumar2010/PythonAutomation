{"name": "test_community_redirection", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/florida/jacksonville-st-augustine/st-johns/rivertown/watersong\" target=\"_self\" aria-label=\"RiverTown - WaterSong\">...</a> is not clickable at point (951, 25). Other element would receive the click: <div id=\"onetrust-policy\">...</div>\n  (Session info: chrome=134.0.6998.118)\nStacktrace:\n\tGetHandleVerifier [0x00E1C7F3+24435]\n\t(No symbol) [0x00DA2074]\n\t(No symbol) [0x00C706E3]\n\t(No symbol) [0x00CBEDD0]\n\t(No symbol) [0x00CBD174]\n\t(No symbol) [0x00CBAD17]\n\t(No symbol) [0x00CBA001]\n\t(No symbol) [0x00CAE685]\n\t(No symbol) [0x00CDD7BC]\n\t(No symbol) [0x00CAE114]\n\t(No symbol) [0x00CDDA34]\n\t(No symbol) [0x00CFF20A]\n\t(No symbol) [0x00CDD5B6]\n\t(No symbol) [0x00CAC54F]\n\t(No symbol) [0x00CAD894]\n\tGetHandleVerifier [0x011270A3+3213347]\n\tGetHandleVerifier [0x0113B0C9+3295305]\n\tGetHandleVerifier [0x0113558C+3271948]\n\tGetHandleVerifier [0x00EB7360+658144]\n\t(No symbol) [0x00DAB27D]\n\t(No symbol) [0x00DA8208]\n\t(No symbol) [0x00DA83A9]\n\t(No symbol) [0x00D9AAC0]\n\tBaseThreadInitThunk [0x76595D49+25]\n\tRtlInitializeExceptionChain [0x770ACE3B+107]\n\tRtlGetAppContainerNamedObjectPath [0x770ACDC1+561]", "trace": "self = <test_sorting.TestSorting object at 0x00000246114CDF90>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"76d917694b8d4ffc6e611c0abeb65bbb\")>\n\n    def test_community_redirection(self, driver):\n        home_page = HomePage(driver)\n        community_page = CommunityPage(driver)\n    \n>       chosenProductName = home_page.search(\"River\", \"community\")\n\ntests\\test_sorting.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\home_page.py:50: in search\n    chosen_element.click()\n..\\automation_framework\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\automation_framework\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n..\\automation_framework\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000246114C30E0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x770ACE3B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x770ACDC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/florida/jacksonville-st-augustine/st-johns/rivertown/watersong\" target=\"_self\" aria-label=\"RiverTown - WaterSong\">...</a> is not clickable at point (951, 25). Other element would receive the click: <div id=\"onetrust-policy\">...</div>\nE         (Session info: chrome=134.0.6998.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00E1C7F3+24435]\nE       \t(No symbol) [0x00DA2074]\nE       \t(No symbol) [0x00C706E3]\nE       \t(No symbol) [0x00CBEDD0]\nE       \t(No symbol) [0x00CBD174]\nE       \t(No symbol) [0x00CBAD17]\nE       \t(No symbol) [0x00CBA001]\nE       \t(No symbol) [0x00CAE685]\nE       \t(No symbol) [0x00CDD7BC]\nE       \t(No symbol) [0x00CAE114]\nE       \t(No symbol) [0x00CDDA34]\nE       \t(No symbol) [0x00CFF20A]\nE       \t(No symbol) [0x00CDD5B6]\nE       \t(No symbol) [0x00CAC54F]\nE       \t(No symbol) [0x00CAD894]\nE       \tGetHandleVerifier [0x011270A3+3213347]\nE       \tGetHandleVerifier [0x0113B0C9+3295305]\nE       \tGetHandleVerifier [0x0113558C+3271948]\nE       \tGetHandleVerifier [0x00EB7360+658144]\nE       \t(No symbol) [0x00DAB27D]\nE       \t(No symbol) [0x00DA8208]\nE       \t(No symbol) [0x00DA83A9]\nE       \t(No symbol) [0x00D9AAC0]\nE       \tBaseThreadInitThunk [0x76595D49+25]\nE       \tRtlInitializeExceptionChain [0x770ACE3B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x770ACDC1+561]\n\n..\\automation_framework\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "attachments": [{"name": "stdout", "source": "10dac0f4-6b08-401e-89b7-f47e3d8a5cfb-attachment.txt", "type": "text/plain"}], "start": 1743574169876, "stop": 1743574181292, "uuid": "dbba7488-7958-4493-9331-67f1b00ba508", "historyId": "edfddfcafa34cdb70ba6f7d2e7e7a4db", "testCaseId": "edfddfcafa34cdb70ba6f7d2e7e7a4db", "fullName": "tests.test_sorting.TestSorting#test_community_redirection", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_sorting"}, {"name": "subSuite", "value": "TestSorting"}, {"name": "host", "value": "EXIPC0261"}, {"name": "thread", "value": "48116-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_sorting"}]}