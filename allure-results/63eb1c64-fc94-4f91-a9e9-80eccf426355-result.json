{"name": "test_qmi_redirection", "status": "broken", "statusDetails": {"message": "TypeError: HomePage.click_on_suggestion() missing 1 required positional argument: 'search_type'", "trace": "self = <pageObjects.home_page.HomePage object at 0x0000027EB9D7BC50>, text = 'River'\nsuggestions = [<selenium.webdriver.remote.webelement.WebElement (session=\"bc2077c691d536b30e21b3403e229cc9\", element=\"f.0B3C965A8558...077c691d536b30e21b3403e229cc9\", element=\"f.0B3C965A855884311CFA3CED4F3DF1CD.d.4C20CDA122B08ADD00A5F5B95307DE92.e.54\")>]\nsearch_type = 'qmi'\n\n    def click_on_suggestion(self, text, suggestions, search_type):\n        chosenProductName = \"\"\n    \n        try:\n            # Try to execute the main logic\n            if not suggestions:\n>               raise ValueError(\"No suggestions found. Retrying...\")  # Force retry if list is empty\nE               ValueError: No suggestions found. Retrying...\n\npageObjects\\home_page.py:57: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_sorting.TestSorting object at 0x0000027EB9D7A490>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bc2077c691d536b30e21b3403e229cc9\")>\n\n    def test_qmi_redirection(self, driver):\n        home_page = HomePage(driver)\n        qmi_page = QMIPage(driver)\n    \n>       chosenProductName = home_page.search(\"River\", \"qmi\")\n\ntests\\test_sorting.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\home_page.py:31: in search\n    return self.click_on_suggestion(text, suggestions, search_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pageObjects.home_page.HomePage object at 0x0000027EB9D7BC50>, text = 'River'\nsuggestions = [<selenium.webdriver.remote.webelement.WebElement (session=\"bc2077c691d536b30e21b3403e229cc9\", element=\"f.0B3C965A8558...077c691d536b30e21b3403e229cc9\", element=\"f.0B3C965A855884311CFA3CED4F3DF1CD.d.4C20CDA122B08ADD00A5F5B95307DE92.e.54\")>]\nsearch_type = 'qmi'\n\n    def click_on_suggestion(self, text, suggestions, search_type):\n        chosenProductName = \"\"\n    \n        try:\n            # Try to execute the main logic\n            if not suggestions:\n                raise ValueError(\"No suggestions found. Retrying...\")  # Force retry if list is empty\n    \n            # Choose a random element from the suggestions\n            chosen_element = random.choice(suggestions)\n    \n            # Scroll the element into view\n            self.scroll_into_view(chosen_element)\n    \n            # Re-locate the element in case the reference is stale\n            suggestions = self.get_locator_value(search_type)  # Re-fetch the suggestions\n            chosen_element = random.choice(suggestions)  # Re-select the element\n            chosenProductName = chosen_element.get_attribute(\"aria-label\")\n    \n            # Wait until it's clickable\n            WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(chosen_element))\n    \n            # Forcefully click using JavaScript Executor\n            self.driver.execute_script(\"arguments[0].click();\", chosen_element)\n    \n            print(f\"Chosen product: {chosenProductName}\")\n    \n        except Exception as e:\n            print(f\"Error: {e}\")\n            print(\"Retrying the process...\")\n    \n            self.enter_text_one_by_one(HomePageLocators.SEARCH_BOX, text)\n            print(\"Executing search function...\")  # Debugging\n    \n            # Adjusting wait to make sure elements are visible\n            WebDriverWait(self.driver, 20).until(\n                EC.visibility_of_all_elements_located((By.XPATH, \"(.//div[contains(@class,'aos-animate')])[2]\"))\n            )\n            # Re-fetch suggestions and retry\n            suggestions = self.get_locator_value(search_type)  # Try fetching suggestions again\n            if suggestions:\n>               return self.click_on_suggestion(suggestions, search_type)  # Recursively retry\nE               TypeError: HomePage.click_on_suggestion() missing 1 required positional argument: 'search_type'\n\npageObjects\\home_page.py:92: TypeError"}, "attachments": [{"name": "stdout", "source": "3405686e-0606-4392-8364-adf633ede692-attachment.txt", "type": "text/plain"}], "start": 1743576233321, "stop": 1743576254937, "uuid": "05899e57-14bc-4439-adf8-b3dd854963ee", "historyId": "9debef47f1b8c16c415841342bbe2097", "testCaseId": "9debef47f1b8c16c415841342bbe2097", "fullName": "tests.test_sorting.TestSorting#test_qmi_redirection", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_sorting"}, {"name": "subSuite", "value": "TestSorting"}, {"name": "host", "value": "EXIPC0261"}, {"name": "thread", "value": "5108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_sorting"}]}