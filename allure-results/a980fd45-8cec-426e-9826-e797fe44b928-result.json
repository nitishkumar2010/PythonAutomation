{"name": "test_community_redirection", "status": "broken", "statusDetails": {"message": "TypeError: HomePage.click_on_suggestion() missing 1 required positional argument: 'search_type'", "trace": "self = <pageObjects.home_page.HomePage object at 0x0000027EB9D66660>, text = 'River'\nsuggestions = [<selenium.webdriver.remote.webelement.WebElement (session=\"475d2ff2889f83684e7cc2a9619c3cbd\", element=\"f.08255AC95573...889f83684e7cc2a9619c3cbd\", element=\"f.08255AC9557321E999ED70CDCFA7CB05.d.985D3E5A63B19A8C58F244A80690F917.e.46\")>, ...]\nsearch_type = 'community'\n\n    def click_on_suggestion(self, text, suggestions, search_type):\n        chosenProductName = \"\"\n    \n        try:\n            # Try to execute the main logic\n            if not suggestions:\n>               raise ValueError(\"No suggestions found. Retrying...\")  # Force retry if list is empty\nE               ValueError: No suggestions found. Retrying...\n\npageObjects\\home_page.py:57: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_sorting.TestSorting object at 0x0000027EB9D7A0D0>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"475d2ff2889f83684e7cc2a9619c3cbd\")>\n\n    def test_community_redirection(self, driver):\n        home_page = HomePage(driver)\n        community_page = CommunityPage(driver)\n    \n>       chosenProductName = home_page.search(\"River\", \"community\")\n\ntests\\test_sorting.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\home_page.py:31: in search\n    return self.click_on_suggestion(text, suggestions, search_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pageObjects.home_page.HomePage object at 0x0000027EB9D66660>, text = 'River'\nsuggestions = [<selenium.webdriver.remote.webelement.WebElement (session=\"475d2ff2889f83684e7cc2a9619c3cbd\", element=\"f.08255AC95573...889f83684e7cc2a9619c3cbd\", element=\"f.08255AC9557321E999ED70CDCFA7CB05.d.985D3E5A63B19A8C58F244A80690F917.e.46\")>, ...]\nsearch_type = 'community'\n\n    def click_on_suggestion(self, text, suggestions, search_type):\n        chosenProductName = \"\"\n    \n        try:\n            # Try to execute the main logic\n            if not suggestions:\n                raise ValueError(\"No suggestions found. Retrying...\")  # Force retry if list is empty\n    \n            # Choose a random element from the suggestions\n            chosen_element = random.choice(suggestions)\n    \n            # Scroll the element into view\n            self.scroll_into_view(chosen_element)\n    \n            # Re-locate the element in case the reference is stale\n            suggestions = self.get_locator_value(search_type)  # Re-fetch the suggestions\n            chosen_element = random.choice(suggestions)  # Re-select the element\n            chosenProductName = chosen_element.get_attribute(\"aria-label\")\n    \n            # Wait until it's clickable\n            WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(chosen_element))\n    \n            # Forcefully click using JavaScript Executor\n            self.driver.execute_script(\"arguments[0].click();\", chosen_element)\n    \n            print(f\"Chosen product: {chosenProductName}\")\n    \n        except Exception as e:\n            print(f\"Error: {e}\")\n            print(\"Retrying the process...\")\n    \n            self.enter_text_one_by_one(HomePageLocators.SEARCH_BOX, text)\n            print(\"Executing search function...\")  # Debugging\n    \n            # Adjusting wait to make sure elements are visible\n            WebDriverWait(self.driver, 20).until(\n                EC.visibility_of_all_elements_located((By.XPATH, \"(.//div[contains(@class,'aos-animate')])[2]\"))\n            )\n            # Re-fetch suggestions and retry\n            suggestions = self.get_locator_value(search_type)  # Try fetching suggestions again\n            if suggestions:\n>               return self.click_on_suggestion(suggestions, search_type)  # Recursively retry\nE               TypeError: HomePage.click_on_suggestion() missing 1 required positional argument: 'search_type'\n\npageObjects\\home_page.py:92: TypeError"}, "attachments": [{"name": "stdout", "source": "0fbe0b7c-38a9-4143-bf98-6c4ec2a23401-attachment.txt", "type": "text/plain"}], "start": 1743576201044, "stop": 1743576222132, "uuid": "88dc951c-3c6d-49d1-8ebc-85b85ade88c3", "historyId": "edfddfcafa34cdb70ba6f7d2e7e7a4db", "testCaseId": "edfddfcafa34cdb70ba6f7d2e7e7a4db", "fullName": "tests.test_sorting.TestSorting#test_community_redirection", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_sorting"}, {"name": "subSuite", "value": "TestSorting"}, {"name": "host", "value": "EXIPC0261"}, {"name": "thread", "value": "5108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_sorting"}]}