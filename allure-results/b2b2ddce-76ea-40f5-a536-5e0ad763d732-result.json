{"name": "test_community_redirection", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=134.0.6998.118)\nStacktrace:\n\tGetHandleVerifier [0x00E1C7F3+24435]\n\t(No symbol) [0x00DA2074]\n\t(No symbol) [0x00C706E3]\n\t(No symbol) [0x00C5FEC0]\n\t(No symbol) [0x00C7DFDF]\n\t(No symbol) [0x00CE46AF]\n\t(No symbol) [0x00CFEB19]\n\t(No symbol) [0x00CDD5B6]\n\t(No symbol) [0x00CAC54F]\n\t(No symbol) [0x00CAD894]\n\tGetHandleVerifier [0x011270A3+3213347]\n\tGetHandleVerifier [0x0113B0C9+3295305]\n\tGetHandleVerifier [0x0113558C+3271948]\n\tGetHandleVerifier [0x00EB7360+658144]\n\t(No symbol) [0x00DAB27D]\n\t(No symbol) [0x00DA8208]\n\t(No symbol) [0x00DA83A9]\n\t(No symbol) [0x00D9AAC0]\n\tBaseThreadInitThunk [0x76595D49+25]\n\tRtlInitializeExceptionChain [0x770ACE3B+107]\n\tRtlGetAppContainerNamedObjectPath [0x770ACDC1+561]", "trace": "self = <test_sorting.TestSorting object at 0x0000015A975C5F90>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"41a040586f38e0c2cb71ececd99578ff\")>\n\n    def test_community_redirection(self, driver):\n        home_page = HomePage(driver)\n        community_page = CommunityPage(driver)\n    \n        chosenProductName = home_page.search(\"River\", \"community\")\n>       community_page.verifyCorrectRedirection(chosenProductName)\n\ntests\\test_sorting.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\community_page.py:15: in verifyCorrectRedirection\n    WebDriverWait(self.driver, 20).until(\n..\\automation_framework\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\n..\\automation_framework\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:306: in _predicate\n    return driver.find_elements(*locator)\n..\\automation_framework\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:936: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n..\\automation_framework\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000015A975A70E0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x770ACE3B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x770ACDC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=134.0.6998.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00E1C7F3+24435]\nE       \t(No symbol) [0x00DA2074]\nE       \t(No symbol) [0x00C706E3]\nE       \t(No symbol) [0x00C5FEC0]\nE       \t(No symbol) [0x00C7DFDF]\nE       \t(No symbol) [0x00CE46AF]\nE       \t(No symbol) [0x00CFEB19]\nE       \t(No symbol) [0x00CDD5B6]\nE       \t(No symbol) [0x00CAC54F]\nE       \t(No symbol) [0x00CAD894]\nE       \tGetHandleVerifier [0x011270A3+3213347]\nE       \tGetHandleVerifier [0x0113B0C9+3295305]\nE       \tGetHandleVerifier [0x0113558C+3271948]\nE       \tGetHandleVerifier [0x00EB7360+658144]\nE       \t(No symbol) [0x00DAB27D]\nE       \t(No symbol) [0x00DA8208]\nE       \t(No symbol) [0x00DA83A9]\nE       \t(No symbol) [0x00D9AAC0]\nE       \tBaseThreadInitThunk [0x76595D49+25]\nE       \tRtlInitializeExceptionChain [0x770ACE3B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x770ACDC1+561]\n\n..\\automation_framework\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "start": 1743573086540, "stop": 1743573105306, "uuid": "1254ae9c-8575-4228-af9c-7b00382a037f", "testCaseId": "edfddfcafa34cdb70ba6f7d2e7e7a4db", "fullName": "tests.test_sorting.TestSorting#test_community_redirection"}